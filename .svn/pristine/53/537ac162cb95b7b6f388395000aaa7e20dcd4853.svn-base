/* Demo Note:  This demo uses a FileProgress class that handles the UI for displaying the file name and percent complete.
The FileProgress class is not part of SWFUpload.
*/


/* **********************
   Event Handlers
   These are my custom event handlers to make my
   web application behave the way I went when SWFUpload
   completes different tasks.  These aren't part of the SWFUpload
   package.  They are part of my application.  Without these none
   of the actions SWFUpload makes will show up in my application.
   ********************** */

var ids =new Array();
function add_uploadok(data)
{

	var id = data.aid;
	var src = data.filepath;
	var thumb =  data.isthumb;
	var name = data.filename;
	var ext = data.fileext;
	var filesize = data.filesize;

	if(thumb == 1) {
		var img = '<a href="javascript:void(0);" onclick="javascript:add_file(this,'+id+','+thumb+')" id="on_'+id+'" class="on"><div class="icon"></div><img src="'+ROOT+'/public'+src+'" width="80" alt="'+name+'" imgid="'+id+'" path="'+src+'"/></a>';
	} else {
		var img = '<a href="javascript:void(0);" onclick="javascript:add_file(this,'+id+','+thumb+')" id="on_'+id+'" class="on"><div class="icon"></div><img src="'+ROOT+'/public/static/img/ext/'+ext+'.png" width="80" alt="'+name+'" imgid="'+id+'" path="'+src+'"/></a>';
	}
	$('#thumbnails').append('<li><div id="attachment_'+id+'" class="img"></div></li>');
	$('#attachment_'+id).html(img);	
	var datas='<div id="uplist_'+id+'"><input type="hidden" name="status" id="status" value="0"><input type="hidden"  id="aids" name="aids[]"  value="'+id+'"  /><input type="text"  id="filedata" name="filedata[]" value="'+src+'"  /> <input type="text" id="namedata" name="namedata[]" value="'+name+'"  /><input type="text" id="isthumb" name="isthumb" value="'+thumb+'"  /> &nbsp;<a href="javascript:remove_this(\'uplist_'+id+'\');">移除</a> </div>';
	$('#myuploadform').append(datas);
	ids.push(id);	
}




function add_file(obj,id,thumb,status){
 	var src = $(obj).children("img").attr("path");
	var name = $(obj).children("img").attr("alt");
	var filesize =  $(obj).children("img").attr("imgsize"); 
	if($(obj).hasClass('on')){
		$(obj).removeClass("on");
		$('#myuploadform #uplist_'+id ).remove();
		for(var i=0;i<ids.length;i++){ if(ids[i]==id)ids.splice(i,1)}
	} else {
		var num = $('#myuploadform > div').length;
		if(num < file_limit){
			$(obj).addClass("on");
			var datas='<div id="uplist_'+id+'"><input type="hidden" name="isthumb" id="isthumb" value="'+thumb+'"><input type="hidden" name="status" id="status" value="'+status+'"><input type="hidden"  id="aids" name="aids[]"  value="'+id+'"  /><input type="text"  id="filedata" name="filedata[]" value="'+src+'"  /> <input type="text" id="namedata" name="namedata[]" value="'+name+'"  /> &nbsp;<a href="javascript:remove_this(\'uplist_'+id+'\');">移除</a> </div>';
			$('#myuploadform').append(datas);		
			ids.push(id);
		}else{
			alert('已经达到附件限制数');
		}
	}
}

function uploadSuccess(file, serverData) {
	try {
		
		var progress = new FileProgress(file, this.customSettings.progressTarget);
		progress.setComplete();
		serverData = eval('('+serverData+')');

		if (serverData.status==1)
        { 			
			progress.setStatus(serverData.info);
			add_uploadok(serverData.data);

        }else{
			progress.setStatus(serverData.info);
        }		
		progress.toggleCancel(false);
		

	} catch (ex) {
		this.debug(ex);
	}
}



function preLoad() {
	if (!this.support.loading) {
		alert("You need the Flash Player 9.028 or above to use SWFUpload.");
		return false;
	}
}
function loadFailed() {
	alert("Something went wrong while loading SWFUpload. If this were a real application we'd clean up and then give you an alternative");
}

function fileQueued(file) {
	try {
		this.customSettings.tdFilesQueued.innerHTML = this.getStats().files_queued;
		var progress = new FileProgress(file, this.customSettings.progressTarget);
		progress.setStatus("等待上传...");
		progress.toggleCancel(true, this);

	} catch (ex) {
		this.debug(ex);
	}

}

function fileQueueError(file, errorCode, message) {
	try {
		if (errorCode === SWFUpload.QUEUE_ERROR.QUEUE_LIMIT_EXCEEDED) {
			alert("您尝试上传太多的文件.\n 队列文件数量超过设定值");
			return;
		}

		var progress = new FileProgress(file, this.customSettings.progressTarget);
		progress.setError();
		progress.toggleCancel(false);

		switch (errorCode) {
		case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:
			progress.setStatus("文件尺寸超过设定值.");
			this.debug("Error Code: File too big, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:
			progress.setStatus("请不要上传空文件.");
			this.debug("Error Code: Zero byte file, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		case SWFUpload.QUEUE_ERROR.INVALID_FILETYPE:
			progress.setStatus("文件类型不合法.");
			this.debug("Error Code: Invalid File Type, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		default:
			if (file !== null) {
				progress.setStatus("上传错误，请与管理员联系！");
			}
			this.debug("Error Code: " + errorCode + ", File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		}
	} catch (ex) {
        this.debug(ex);
    }
}

function fileDialogComplete(numFilesSelected, numFilesQueued) {
	try {
		if (numFilesSelected > 0) {
			document.getElementById(this.customSettings.cancelButtonId).disabled = false;
		}
		
		/* I want auto start the upload and I can do that here */
		this.startUpload();
	} catch (ex)  {
        this.debug(ex);
	}
}

function uploadStart(file) {
	try {
		/* I don't want to do any file validation or anything,  I'll just update the UI and
		return true to indicate that the upload should start.
		It's important to update the UI here because in Linux no uploadProgress events are called. The best
		we can do is say we are uploading.
		 */
		var progress = new FileProgress(file, this.customSettings.progressTarget);
		progress.setStatus("正在上传请稍后...");
		progress.toggleCancel(true, this);
	}
	catch (ex) {}
	
	return true;
}

function uploadProgress(file, bytesLoaded, bytesTotal) {
	try {
		var percent = Math.ceil((bytesLoaded / bytesTotal) * 100);

		var progress = new FileProgress(file, this.customSettings.progressTarget);
		progress.setProgress(percent);
		progress.setStatus("正在上传请稍后...");
	} catch (ex) {
		this.debug(ex);
	}
}


function uploadError(file, errorCode, message) {
	try {
		var progress = new FileProgress(file, this.customSettings.progressTarget);
		progress.setError();
		progress.toggleCancel(false);

		switch (errorCode) {
		case SWFUpload.UPLOAD_ERROR.HTTP_ERROR:
			progress.setStatus("上传错误:" + message);
			this.debug("Error Code: HTTP Error, File name: " + file.name + ", Message: " + message);
			break;
		case SWFUpload.UPLOAD_ERROR.UPLOAD_FAILED:
			progress.setStatus("上传错误.");
			this.debug("Error Code: Upload Failed, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		case SWFUpload.UPLOAD_ERROR.IO_ERROR:
			progress.setStatus("服务器 I/O 错误");
			this.debug("Error Code: IO Error, File name: " + file.name + ", Message: " + message);
			break;
		case SWFUpload.UPLOAD_ERROR.SECURITY_ERROR:
			progress.setStatus("服务器安全认证错误");
			this.debug("Error Code: Security Error, File name: " + file.name + ", Message: " + message);
			break;
		case SWFUpload.UPLOAD_ERROR.UPLOAD_LIMIT_EXCEEDED:
			progress.setStatus("队列文件数量超过设定值.");
			this.debug("Error Code: Upload Limit Exceeded, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		case SWFUpload.UPLOAD_ERROR.FILE_VALIDATION_FAILED:
			progress.setStatus("附件安全检测失败，上传终止.");
			this.debug("Error Code: File Validation Failed, File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		case SWFUpload.UPLOAD_ERROR.FILE_CANCELLED:
			// If there aren't any files left (they were all cancelled) disable the cancel button
			if (this.getStats().files_queued === 0) {
				document.getElementById(this.customSettings.cancelButtonId).disabled = true;
			}
			progress.setStatus("上传取消");
			progress.setCancelled();
			break;
		case SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED:
			progress.setStatus("上传终止");
			break;
		default:
			progress.setStatus("Unhandled Error: " + errorCode);
			this.debug("Error Code: " + errorCode + ", File name: " + file.name + ", File size: " + file.size + ", Message: " + message);
			break;
		}
	} catch (ex) {
        this.debug(ex);
    }
}

function uploadComplete(file) {
	//if (this.getStats().files_queued === 0) {
	//	document.getElementById(this.customSettings.cancelButtonId).disabled = true;
	//}

	//this.customSettings.tdFilesQueued.innerHTML = this.getStats().files_queued;
	this.customSettings.tdFilesUploaded.innerHTML = this.getStats().successful_uploads;
	this.customSettings.tdErrors.innerHTML = this.getStats().upload_errors;

}

// This event comes from the Queue Plugin
function queueComplete(numFilesUploaded) {
	var status = document.getElementById("divStatus");
	status.innerHTML = numFilesUploaded + " file" + (numFilesUploaded === 1 ? "" : "s") + " uploaded.";
}